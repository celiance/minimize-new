{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\lukas\\\\barcodescanner\\\\src\\\\Scanner.js\";\nimport React from \"react\";\nimport Quagga from \"quagga\";\nexport default class Scanner extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      results: []\n    };\n\n    this.onDetected = result => {\n      console.log(\"FOUND\", result);\n      let code = result.codeResult.code;\n      this.setState({\n        results: [...this.state.results, code]\n      });\n\n      if (this.state.results.length > 10) {\n        this.props.onDetected(this.state.results);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"interactive\",\n        className: \"viewport\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [this.state.results.length, \" / 10\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this);\n  }\n\n  componentDidMount() {\n    Quagga.init({\n      inputStream: {\n        type: \"LiveStream\",\n        constraints: {\n          width: 640,\n          height: 480,\n          facingMode: \"environment\" // or user\n\n        }\n      },\n      locator: {\n        patchSize: \"medium\",\n        halfSample: true\n      },\n      numOfWorkers: 2,\n      decoder: {\n        readers: [\"ean_reader\"],\n        debug: {\n          drawBoundingBox: true,\n          showFrequency: false,\n          drawScanline: true,\n          showPattern: false\n        }\n      },\n      locate: true\n    }, function (err) {\n      if (err) {\n        return console.error(err);\n      }\n\n      console.log(\"Initialization finished. Ready to start\");\n      Quagga.start();\n    });\n    Quagga.onDetected(this.onDetected);\n  }\n\n  componentWillUnmount() {\n    Quagga.offDetected(this.onDetected);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/lukas/barcodescanner/src/Scanner.js"],"names":["React","Quagga","Scanner","Component","state","results","onDetected","result","console","log","code","codeResult","setState","length","props","render","componentDidMount","init","inputStream","type","constraints","width","height","facingMode","locator","patchSize","halfSample","numOfWorkers","decoder","readers","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","locate","err","error","start","componentWillUnmount","offDetected"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,eAAe,MAAMC,OAAN,SAAsBF,KAAK,CAACG,SAA5B,CAAsC;AAAA;AAAA;AAAA,SACnDC,KADmD,GAC3C;AACNC,MAAAA,OAAO,EAAE;AADH,KAD2C;;AAAA,SAwDnDC,UAxDmD,GAwDtCC,MAAM,IAAI;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,MAArB;AACA,UAAIG,IAAI,GAAGH,MAAM,CAACI,UAAP,CAAkBD,IAA7B;AACA,WAAKE,QAAL,CAAc;AAAEP,QAAAA,OAAO,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,OAAf,EAAwBK,IAAxB;AAAX,OAAd;;AAEA,UAAI,KAAKN,KAAL,CAAWC,OAAX,CAAmBQ,MAAnB,GAA4B,EAAhC,EAAoC;AAClC,aAAKC,KAAL,CAAWR,UAAX,CAAsB,KAAKF,KAAL,CAAWC,OAAjC;AACD;AACF,KAhEkD;AAAA;;AAKnDU,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,8BACE;AAAK,QAAA,EAAE,EAAC,aAAR;AAAsB,QAAA,SAAS,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mBAAI,KAAKX,KAAL,CAAWC,OAAX,CAAmBQ,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAEDG,EAAAA,iBAAiB,GAAG;AAClBf,IAAAA,MAAM,CAACgB,IAAP,CACE;AACEC,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE,YADK;AAEXC,QAAAA,WAAW,EAAE;AACXC,UAAAA,KAAK,EAAE,GADI;AAEXC,UAAAA,MAAM,EAAE,GAFG;AAGXC,UAAAA,UAAU,EAAE,aAHD,CAGe;;AAHf;AAFF,OADf;AASEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,SAAS,EAAE,QADJ;AAEPC,QAAAA,UAAU,EAAE;AAFL,OATX;AAaEC,MAAAA,YAAY,EAAE,CAbhB;AAcEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE,CAAC,YAAD,CADF;AAEPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,eAAe,EAAE,IADZ;AAELC,UAAAA,aAAa,EAAE,KAFV;AAGLC,UAAAA,YAAY,EAAE,IAHT;AAILC,UAAAA,WAAW,EAAE;AAJR;AAFA,OAdX;AAuBEC,MAAAA,MAAM,EAAE;AAvBV,KADF,EA0BE,UAASC,GAAT,EAAc;AACZ,UAAIA,GAAJ,EAAS;AACP,eAAO5B,OAAO,CAAC6B,KAAR,CAAcD,GAAd,CAAP;AACD;;AACD5B,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACAR,MAAAA,MAAM,CAACqC,KAAP;AACD,KAhCH;AAkCArC,IAAAA,MAAM,CAACK,UAAP,CAAkB,KAAKA,UAAvB;AACD;;AAEDiC,EAAAA,oBAAoB,GAAG;AACrBtC,IAAAA,MAAM,CAACuC,WAAP,CAAmB,KAAKlC,UAAxB;AACD;;AAtDkD","sourcesContent":["import React from \"react\";\r\nimport Quagga from \"quagga\";\r\n\r\nexport default class Scanner extends React.Component {\r\n  state = {\r\n    results: []\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div id=\"interactive\" className=\"viewport\" />\r\n        <p>{this.state.results.length} / 10</p>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    Quagga.init(\r\n      {\r\n        inputStream: {\r\n          type: \"LiveStream\",\r\n          constraints: {\r\n            width: 640,\r\n            height: 480,\r\n            facingMode: \"environment\" // or user\r\n          }\r\n        },\r\n        locator: {\r\n          patchSize: \"medium\",\r\n          halfSample: true\r\n        },\r\n        numOfWorkers: 2,\r\n        decoder: {\r\n          readers: [\"ean_reader\"],\r\n          debug: {\r\n            drawBoundingBox: true,\r\n            showFrequency: false,\r\n            drawScanline: true,\r\n            showPattern: false\r\n          }\r\n        },\r\n        locate: true\r\n      },\r\n      function(err) {\r\n        if (err) {\r\n          return console.error(err);\r\n        }\r\n        console.log(\"Initialization finished. Ready to start\");\r\n        Quagga.start();\r\n      }\r\n    );\r\n    Quagga.onDetected(this.onDetected);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    Quagga.offDetected(this.onDetected);\r\n  }\r\n\r\n  onDetected = result => {\r\n    console.log(\"FOUND\", result);\r\n    let code = result.codeResult.code;\r\n    this.setState({ results: [...this.state.results, code] });\r\n\r\n    if (this.state.results.length > 10) {\r\n      this.props.onDetected(this.state.results);\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}