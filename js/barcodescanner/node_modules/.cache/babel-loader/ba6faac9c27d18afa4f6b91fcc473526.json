{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\lukas\\\\barcodescanner\\\\src\\\\BarcodeTextField.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Quagga from \"quagga\"; // ES6\n\nimport \"./styles.css\";\nimport axios from \"axios\";\nvar _scannerIsRunning = false; //API abfrage\n\nfunction getAPIdata(barcode) {\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // Use a proxy to avoid CORS error\n\n  const api_key = \"rnglf824ylb19y3hzn5vsguu14jlet\";\n  const url = proxyurl + \"https://api.barcodelookup.com/v2/products?barcode=\" + barcode + \"&formatted=y&key=\" + api_key;\n  fetch(url).then(response => response.json()).then(data => {\n    document.getElementById(\"BarcodeNumber\").innerHTML = data.products[0].barcode_number;\n    document.getElementById(\"ProductName\").innerHTML = data.products[0].product_name;\n    document.getElementById(\"Images\").innerHTML = '<img src=\"' + data.products[0].images + '\">';\n  }).catch(err => {\n    throw err;\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  let submit = document.querySelector('#submit_barcode');\n  submit.addEventListener('click', function () {\n    let barcode_input = document.querySelector('#text-input').value;\n    getAPIdata(barcode_input);\n  });\n}, false);\n\nclass BarcodeTextField extends React.Component {\n  constructor(props) {\n    super(props); // This binding is necessary to make `this` work in the callback\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleFileSelect = this.handleFileSelect.bind(this);\n  }\n\n  handleClick() {\n    if (_scannerIsRunning) {\n      Quagga.stop();\n    } else {\n      this.startScanner();\n    }\n  } //Diese Methode initialisiert die Bibliothek für eine bestimmte Konfigurationskonfiguration (siehe unten) und ruft den Rückruf (err) auf,\n  //wenn Quagga seine Bootstrapping-Phase abgeschlossen hat. Der Initialisierungsprozess fordert auch den Kamerazugriff an, wenn die Echtzeiterkennung konfiguriert ist.\n  //Im Fehlerfall wird der Parameter err gesetzt und enthält Informationen zur Ursache. Eine mögliche Ursache kann sein, dass inputStream.type auf LiveStream eingestellt ist, der Browser diese API jedoch nicht unterstützt oder einfach,\n  //wenn der Benutzer die Berechtigung zur Verwendung der Kamera verweigert.\n\n\n  startScanner() {\n    Quagga.init({\n      inputStream: {\n        name: \"Live\",\n        type: \"LiveStream\",\n        target: document.querySelector(\"#scanner-container\"),\n        constraints: {\n          width: 480,\n          height: 320,\n          facingMode: \"environment\"\n        }\n      },\n      decoder: {\n        readers: [\"code_128_reader\", \"ean_reader\", \"ean_8_reader\", \"code_39_reader\", \"code_39_vin_reader\", \"codabar_reader\", \"upc_reader\", \"upc_e_reader\", \"i2of5_reader\"],\n        debug: {\n          showCanvas: true,\n          showPatches: true,\n          showFoundPatches: true,\n          showSkeleton: true,\n          showLabels: true,\n          showPatchLabels: true,\n          showRemainingPatchLabels: true,\n          boxFromPatches: {\n            showTransformed: true,\n            showTransformedBox: true,\n            showBB: true\n          }\n        }\n      }\n    }, function (err) {\n      if (err) {\n        alert(\"You need a camera to scan barcodes.\");\n        console.log(err);\n        document.querySelector(\"#scanner-container\").innerHTML = \"\";\n        return;\n      }\n\n      console.log(\"Initialization finished. Ready to start\"); //  Wenn die Bibliothek initialisiert wird, startet die Methode start () den Videostream und beginnt, die Bilder zu lokalisieren und zu dekodieren.\n\n      Quagga.start(); // Set flag to is running\n      //_scannerIsRunning = true;\n    });\n    Quagga.onProcessed(function (result) {\n      var drawingCtx = Quagga.canvas.ctx.overlay,\n          drawingCanvas = Quagga.canvas.dom.overlay;\n\n      if (result) {\n        if (result.boxes) {\n          drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\"width\")), parseInt(drawingCanvas.getAttribute(\"height\")));\n          result.boxes.filter(function (box) {\n            return box !== result.box;\n          }).forEach(function (box) {\n            Quagga.ImageDebug.drawPath(box, {\n              x: 0,\n              y: 1\n            }, drawingCtx, {\n              color: \"green\",\n              lineWidth: 2\n            });\n          });\n        }\n\n        if (result.box) {\n          Quagga.ImageDebug.drawPath(result.box, {\n            x: 0,\n            y: 1\n          }, drawingCtx, {\n            color: \"#00F\",\n            lineWidth: 2\n          });\n        }\n\n        if (result.codeResult && result.codeResult.code) {\n          Quagga.ImageDebug.drawPath(result.line, {\n            x: \"x\",\n            y: \"y\"\n          }, drawingCtx, {\n            color: \"red\",\n            lineWidth: 3\n          });\n        }\n      }\n    }); //Registriert eine Rückruffunktion (Daten), die ausgelöst wird, wenn ein Barcode-Muster erfolgreich gefunden und decodiert wurde.\n    //Das übergebene Datenobjekt enthält Informationen über den Decodierungsprozess, einschließlich des erkannten Codes, der durch Aufrufen von data.codeResult.code abgerufen werden kann.\n\n    Quagga.onDetected(function (result) {\n      Quagga.stop();\n      document.querySelector(\"#text-input\").value = result.codeResult.code;\n      document.querySelector(\"#scanner-container\").innerHTML = \"\";\n      console.log(\"Barcode detected and processed : [\" + result.codeResult.code + \"]\", result);\n    });\n  }\n\n  handleFileSelect(evt) {\n    var files = evt.target.files; // FileList object\n\n    var tmpImgURL = URL.createObjectURL(files[0]); //\n\n    Quagga.decodeSingle({\n      src: tmpImgURL,\n      numOfWorkers: 0,\n      // Needs to be 0 when used within node\n      locate: true,\n      inputStream: {\n        size: 800 // restrict input-size to be 800px in width (long-side)\n\n      },\n      decoder: {\n        readers: [\"code_128_reader\", \"ean_reader\", \"ean_8_reader\", \"code_39_reader\", \"code_39_vin_reader\", \"codabar_reader\", \"upc_reader\", \"upc_e_reader\", \"i2of5_reader\"]\n      }\n    }, function (result) {\n      console.log(result);\n\n      if (result) {\n        if (result.codeResult != null) {\n          document.querySelector(\"#text-input\").value = result.codeResult.code; //fügt result in API ein\n\n          getAPIdata(result.codeResult.code);\n          console.log(\"result\", result.codeResult.code);\n        } else {\n          alert(\"not detected\");\n          document.querySelector(\"#text-input\").value = \"\";\n        }\n      } else {\n        alert(\"not detected\");\n        document.querySelector(\"#text-input\").value = \"\";\n      }\n    });\n  }\n\n  componentDidMount() {\n    document.querySelector(\"#inputId\").addEventListener(\"change\", this.handleFileSelect, false);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"inline-block\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"text-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleClick,\n        children: \" Scan \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        id: \"submit_barcode\",\n        children: \" Add \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"inputId\",\n        type: \"file\",\n        accept: \"image/*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Barcode Number: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"BarcodeNumber\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 43\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 73\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Product Name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"ProductName\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 69\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default BarcodeTextField;","map":{"version":3,"sources":["C:/Users/lukas/barcodescanner/src/BarcodeTextField.js"],"names":["React","ReactDOM","Quagga","axios","_scannerIsRunning","getAPIdata","barcode","proxyurl","api_key","url","fetch","then","response","json","data","document","getElementById","innerHTML","products","barcode_number","product_name","images","catch","err","addEventListener","submit","querySelector","barcode_input","value","BarcodeTextField","Component","constructor","props","handleClick","bind","handleFileSelect","stop","startScanner","init","inputStream","name","type","target","constraints","width","height","facingMode","decoder","readers","debug","showCanvas","showPatches","showFoundPatches","showSkeleton","showLabels","showPatchLabels","showRemainingPatchLabels","boxFromPatches","showTransformed","showTransformedBox","showBB","alert","console","log","start","onProcessed","result","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","boxes","clearRect","parseInt","getAttribute","filter","box","forEach","ImageDebug","drawPath","x","y","color","lineWidth","codeResult","code","line","onDetected","evt","files","tmpImgURL","URL","createObjectURL","decodeSingle","src","numOfWorkers","locate","size","componentDidMount","render","display"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Quagga from \"quagga\"; // ES6\r\nimport \"./styles.css\";\r\nimport axios from \"axios\";\r\n\r\nvar _scannerIsRunning = false;\r\n\r\n//API abfrage\r\nfunction getAPIdata(barcode) {\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // Use a proxy to avoid CORS error\r\n    const api_key = \"rnglf824ylb19y3hzn5vsguu14jlet\";\r\n    const url = proxyurl + \"https://api.barcodelookup.com/v2/products?barcode=\" + barcode + \"&formatted=y&key=\" + api_key;\r\n    fetch(url)\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n      document.getElementById(\"BarcodeNumber\").innerHTML = (data.products[0].barcode_number);\r\ndocument.getElementById(\"ProductName\").innerHTML = (data.products[0].product_name);\r\ndocument.getElementById(\"Images\").innerHTML = '<img src=\"' + (data.products[0].images) + '\">';\r\n\r\n            })\r\n            .catch(err => {\r\n                throw err\r\n            });\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\nlet submit = document.querySelector('#submit_barcode');\r\nsubmit.addEventListener('click', function(){\r\n  let barcode_input = document.querySelector('#text-input').value;\r\n  getAPIdata(barcode_input);\r\n})\r\n}, false);\r\n\r\nclass BarcodeTextField extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // This binding is necessary to make `this` work in the callback\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleFileSelect = this.handleFileSelect.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    if (_scannerIsRunning) {\r\n      Quagga.stop();\r\n    } else {\r\n      this.startScanner();\r\n    }\r\n  }\r\n\r\n//Diese Methode initialisiert die Bibliothek für eine bestimmte Konfigurationskonfiguration (siehe unten) und ruft den Rückruf (err) auf,\r\n//wenn Quagga seine Bootstrapping-Phase abgeschlossen hat. Der Initialisierungsprozess fordert auch den Kamerazugriff an, wenn die Echtzeiterkennung konfiguriert ist.\r\n//Im Fehlerfall wird der Parameter err gesetzt und enthält Informationen zur Ursache. Eine mögliche Ursache kann sein, dass inputStream.type auf LiveStream eingestellt ist, der Browser diese API jedoch nicht unterstützt oder einfach,\r\n//wenn der Benutzer die Berechtigung zur Verwendung der Kamera verweigert.\r\n\r\n  startScanner() {\r\n    Quagga.init(\r\n      {\r\n        inputStream: {\r\n          name: \"Live\",\r\n          type: \"LiveStream\",\r\n          target: document.querySelector(\"#scanner-container\"),\r\n          constraints: {\r\n            width: 480,\r\n            height: 320,\r\n            facingMode: \"environment\"\r\n          }\r\n        },\r\n        decoder: {\r\n          readers: [\r\n            \"code_128_reader\",\r\n            \"ean_reader\",\r\n            \"ean_8_reader\",\r\n            \"code_39_reader\",\r\n            \"code_39_vin_reader\",\r\n            \"codabar_reader\",\r\n            \"upc_reader\",\r\n            \"upc_e_reader\",\r\n            \"i2of5_reader\"\r\n          ],\r\n          debug: {\r\n            showCanvas: true,\r\n            showPatches: true,\r\n            showFoundPatches: true,\r\n            showSkeleton: true,\r\n            showLabels: true,\r\n            showPatchLabels: true,\r\n            showRemainingPatchLabels: true,\r\n            boxFromPatches: {\r\n              showTransformed: true,\r\n              showTransformedBox: true,\r\n              showBB: true\r\n            }\r\n          }\r\n        }\r\n      },\r\n      function(err) {\r\n        if (err) {\r\n          alert(\"You need a camera to scan barcodes.\");\r\n          console.log(err);\r\n          document.querySelector(\"#scanner-container\").innerHTML = \"\";\r\n\r\n          return;\r\n        }\r\n\r\n        console.log(\"Initialization finished. Ready to start\");\r\n\r\n\r\n      //  Wenn die Bibliothek initialisiert wird, startet die Methode start () den Videostream und beginnt, die Bilder zu lokalisieren und zu dekodieren.\r\n        Quagga.start();\r\n\r\n        // Set flag to is running\r\n        //_scannerIsRunning = true;\r\n      }\r\n    );\r\n\r\n    Quagga.onProcessed(function(result) {\r\n      var drawingCtx = Quagga.canvas.ctx.overlay,\r\n        drawingCanvas = Quagga.canvas.dom.overlay;\r\n\r\n      if (result) {\r\n        if (result.boxes) {\r\n          drawingCtx.clearRect(\r\n            0,\r\n            0,\r\n            parseInt(drawingCanvas.getAttribute(\"width\")),\r\n            parseInt(drawingCanvas.getAttribute(\"height\"))\r\n          );\r\n          result.boxes\r\n            .filter(function(box) {\r\n              return box !== result.box;\r\n            })\r\n            .forEach(function(box) {\r\n              Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, {\r\n                color: \"green\",\r\n                lineWidth: 2\r\n              });\r\n            });\r\n        }\r\n\r\n        if (result.box) {\r\n          Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, {\r\n            color: \"#00F\",\r\n            lineWidth: 2\r\n          });\r\n        }\r\n\r\n        if (result.codeResult && result.codeResult.code) {\r\n          Quagga.ImageDebug.drawPath(\r\n            result.line,\r\n            { x: \"x\", y: \"y\" },\r\n            drawingCtx,\r\n            { color: \"red\", lineWidth: 3 }\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n//Registriert eine Rückruffunktion (Daten), die ausgelöst wird, wenn ein Barcode-Muster erfolgreich gefunden und decodiert wurde.\r\n//Das übergebene Datenobjekt enthält Informationen über den Decodierungsprozess, einschließlich des erkannten Codes, der durch Aufrufen von data.codeResult.code abgerufen werden kann.\r\n    Quagga.onDetected(function(result) {\r\n      Quagga.stop();\r\n      document.querySelector(\"#text-input\").value = result.codeResult.code;\r\n      document.querySelector(\"#scanner-container\").innerHTML = \"\";\r\n      console.log(\r\n        \"Barcode detected and processed : [\" + result.codeResult.code + \"]\",\r\n        result\r\n      );\r\n    });\r\n  }\r\n\r\n  handleFileSelect(evt) {\r\n    var files = evt.target.files; // FileList object\r\n\r\n    var tmpImgURL = URL.createObjectURL(files[0]);\r\n\r\n//\r\n    Quagga.decodeSingle(\r\n      {\r\n        src: tmpImgURL,\r\n        numOfWorkers: 0, // Needs to be 0 when used within node\r\n        locate: true,\r\n        inputStream: {\r\n          size: 800 // restrict input-size to be 800px in width (long-side)\r\n        },\r\n        decoder: {\r\n          readers: [\r\n            \"code_128_reader\",\r\n            \"ean_reader\",\r\n            \"ean_8_reader\",\r\n            \"code_39_reader\",\r\n            \"code_39_vin_reader\",\r\n            \"codabar_reader\",\r\n            \"upc_reader\",\r\n            \"upc_e_reader\",\r\n            \"i2of5_reader\"\r\n          ]\r\n        }\r\n      },\r\n      function(result) {\r\n        console.log(result);\r\n        if (result) {\r\n          if (result.codeResult != null) {\r\n            document.querySelector(\"#text-input\").value =\r\n              result.codeResult.code;\r\n              //fügt result in API ein\r\n              getAPIdata(result.codeResult.code);\r\n            console.log(\"result\", result.codeResult.code);\r\n          } else {\r\n            alert(\"not detected\");\r\n            document.querySelector(\"#text-input\").value = \"\";\r\n          }\r\n        } else {\r\n          alert(\"not detected\");\r\n          document.querySelector(\"#text-input\").value = \"\";\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    document\r\n      .querySelector(\"#inputId\")\r\n      .addEventListener(\"change\", this.handleFileSelect, false);\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ display: \"inline-block\" }}>\r\n        <input type=\"text\" id=\"text-input\" />\r\n        <button onClick={this.handleClick}> Scan </button>\r\n        <button type = \"submit\" id=\"submit_barcode\"> Add </button>\r\n        <input id=\"inputId\" type=\"file\" accept=\"image/*\" />\r\n        <br/>\r\n        <br/>\r\n        <strong>Barcode Number: </strong> <div id=\"BarcodeNumber\"></div><br/>\r\n\r\n        <strong>Product Name: </strong> <div id=\"ProductName\"></div><br/>\r\n\r\n        <div id=\"images\">\r\n\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default BarcodeTextField;\r\n"]},"metadata":{},"sourceType":"module"}